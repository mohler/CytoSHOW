// "StartupMacros"
// The macros and macro tools in this file ("StartupMacros.txt") are 
// automatically installed in the Plugins>Macros submenu and
//  in the tool bar when ImageJ starts up.

//  About the drawing tools.
//
//  This is a set of drawing tools similar to the pencil, paintbrush
//  and flood fill (paint bucket) tools in NIH Image. The pencil
//  and paintbrush draw in the current foreground color. The
//  flood fill tool fills the selected area using the foreground color.
//  Hold down the alt key to have the pencil and paintbrush draw 
//  using the background color or to have the flood fill tool fill 
//  using the background color. Set the foreground and background 
//  colors by double-clicking on the eye dropper tool.  Double-click
//  on the pencil or paintbrush tool to set the drawing width for that tool.
//
// Icons contributed by Tony Collins.

   // Global variables
   var pencilWidth=1,  eraserWidth=10, leftClick=16, alt=8;
   var brushWidth = 10; //call("ij.Prefs.get", "startup.brush", "10");
   var floodType =  "8-connected"; //call("ij.Prefs.get", "startup.flood", "8-connected");

   // The macro named "AutoRun" runs when ImageJ starts.
   // macro "AutoRun" {
   //    print("AutoRun");
   // }

   // The macro named "AutoRunAndHide" runs when ImageJ starts
   // and the file containing it is not displayed when ImageJ opens it.
   // macro "AutoRunAndHide" {}

  var pmCmds = newMenu("Popup Menu",
       newArray("Help...", "Rename...", "Duplicate...", "Original Scale", 
       "Paste Control...", "-", "Record...", "Capture Screen ", "Monitor Memory...", 
       "List Commands...", "Control Panel...", "Startup Macros...", "Search..."));

  macro "Popup Menu" {
      cmd = getArgument();
      if (cmd=="Help...")
           showMessage("About Popup Menu",
               "To customize this menu, edit the line that starts with\n\"var pmCmds\" in ImageJ/macros/StartupMacros.txt.");
      else
          run(cmd);
  }

  macro "Unused Tool -" {}

  //macro "Abort Macro or Plugin (or press Esc key) Action Tool - CbooP51b1f5fbbf5f1b15510T5c10X" {
  //    setKeyDown("Esc");
  //
 
  var xx = requires138b(); // check version at install
  function requires138b() {requires("1.38b"); return 0; }

     var dCmds = newMenu("Developer Menu Tool",
      newArray("ImageJ Website","News", "Documentation", "ImageJ Wiki", "Resources", "Macro Language", "Macros", 
      "Macro Functions", "Startup Macros...", "Plugins", "Source Code", "Mailing List Archives", "-", "Record...", 
      "Capture Screen ", "Monitor Memory...", "List Commands...", "Control Panel...", "Search...", "Debug Mode"));
      
  macro "Developer Menu Tool - C037T0b11DT7b09eTcb09v" {
       cmd = getArgument();
       if (cmd=="ImageJ Website")
           run("URL...", "url=http://rsbweb.nih.gov/ij/");
       else if (cmd=="News")
           run("URL...", "url=http://rsbweb.nih.gov/ij/notes.html");
       else if (cmd=="Documentation")
           run("URL...", "url=http://rsbweb.nih.gov/ij/docs/");
       else if (cmd=="ImageJ Wiki")
           run("URL...", "url=http://imagejdocu.tudor.lu/imagej-documentation-wiki/");
       else if (cmd=="Resources")
           run("URL...", "url=http://rsbweb.nih.gov/ij/developer/");
       else if (cmd=="Macro Language")
           run("URL...", "url=http://rsbweb.nih.gov/ij/developer/macro/macros.html");
       else if (cmd=="Macros")
           run("URL...", "url=http://rsbweb.nih.gov/ij/macros/");
        else if (cmd=="Macro Functions")
           run("URL...", "url=http://rsbweb.nih.gov/ij/developer/macro/functions.html");
        else if (cmd=="Plugins")
           run("URL...", "url=http://rsbweb.nih.gov/ij/plugins/");
        else if (cmd=="Source Code")
           run("URL...", "url=http://rsbweb.nih.gov/ij/developer/source/");
        else if (cmd=="Mailing List Archives")
           run("URL...", "url=https://list.nih.gov/archives/imagej.html");
        else if (cmd=="Debug Mode")
           setOption("DebugMode", true);
	 else if (cmd!="-")
            run(cmd);
  }

  var sCmds = newMenu("Stacks Menu Tool", 
       newArray("Add Slice", "Delete Slice", "Next Slice [>]", "Previous Slice [<]", "Set Slice...", "-",
       "Images to Stack", "Stack to Images", "Make Montage...", "Reslice [/]...", "Z Project...",
       "3D Project...", "Plot Z-axis Profile", "-", "Label...", "Combine...", "Concatenate...", "-",
       "Start Animation", "Stop Animation", "Animation Options...", "-", "T1 Head (2.4M, 16-bits)"));
  macro "Stacks Menu Tool - C037T1b11ST8b09tTcb09k" {
      cmd = getArgument();
      if (cmd=="Images to Stack")
          run(cmd, " ");
      else if (cmd!="-")
          run(cmd);
  }

   macro "Paintbrush Tool - C037La077Ld098L6859L4a2fL2f4fL5e9bL9b98L6888L5e8dL888cC123L8a3fL8b6d" {
        getCursorLoc(x, y, z, flags);
        if (flags&alt!=0)
              setColorToBackgound();
        draw(brushWidth);
   }

   macro 'Paintbrush Tool Options...' {
      brushWidth = getNumber("Brush Width (pixels):", brushWidth);
      call("ij.Prefs.set", "startup.brush", brushWidth);
  }

   macro "Flood Fill Tool -C037B21P085373b75d0L4d1aL3135L4050L6166D57D77D68D09D94Da7C123Da5La9abLb6bc" {
        setupUndo();
        getCursorLoc(x, y, z, flags);
        if (flags&alt!=0) setColorToBackgound();
        floodFill(x, y, floodType);
   }

   function draw(width) {
        setupUndo();
        getCursorLoc(x, y, z, flags);
        setLineWidth(width);
        moveTo(x,y);
        x2=-1; y2=-1;
        while (true) {
            getCursorLoc(x, y, z, flags);
            if (flags&leftClick==0) exit();
            if (x!=x2 || y!=y2)
                lineTo(x,y);
            x2=x; y2 =y;
            wait(10);
        }
   }

   function setColorToBackgound() {
       setColor(getValue("color.background"));
   }

  macro 'Flood Fill Tool Options...' {
      Dialog.create("Flood Fill Tool");
      Dialog.addChoice("Flood Type:", newArray("4-connected", "8-connected"), floodType);
      Dialog.show();
      floodType = Dialog.getChoice();
      call("ij.Prefs.set", "startup.flood", floodType);
  }
 
  macro "Set Drawing Color..."{ 
      run("Color Picker..."); 
  }

  macro "-" {} //menu divider

  macro "About Startup Macros..." {
      path = getDirectory("macros")+"About Startup Macros";
      if (!File.exists(path))
          exit("\"About Startup Macros\" not found in ImageJ/macros/.");
      open(path);
  }

  // This example macro demonstrates how to create a
  // custom command with a keyboard shortcut.
  macro "Save As JPEG... [j]" {
     quality = call("ij.plugin.JpegWriter.getQuality");
     quality = getNumber("JPEG quality (0-100):", quality);
     run("Input/Output...", "jpeg="+quality);
     saveAs("Jpeg");
  }

macro "Monitor diSPIM Acquisition" {
	    minA =0;
	    maxA = 255;
	    channelsA = "11";
	    modeA="composite";
	    vWidth = 0.163;
	    vHeight = 0.163;
	    vDepth = 1.000;
	    vUnit = "micron";

	dir = "";
	while (File.isDirectory(dir) != 1) {
		dir = getDirectory("Select top directory for diSPIM raw data");
	}
	IJ.log(dir);
	fileListA = newArray("");
	fileListB = newArray("");
	fileRanksA = newArray("");
	fileRanksB = newArray("");
	fileNumsA = newArray("");
	fileNumsB = newArray("");
	fileSortA = newArray("");
	fileSortB = newArray("");

	File.saveString("", dir+"Big5DFileListA.txt");
	while(!File.exists(dir+"Big5DFileListA.txt"))
		wait(100);
	File.saveString("", dir+"Big5DFileListB.txt");
	while(!File.exists(dir+"Big5DFileListB.txt"))
		wait(100);
	File.saveString("", dir+"BigMAXFileListA.txt");
	while(!File.exists(dir+"BigMAXFileListA.txt"))
		wait(100);
	File.saveString("", dir+"BigMAXFileListB.txt");
	while(!File.exists(dir+"BigMAXFileListB.txt"))
		wait(100);

	Dialog.create("Data Set Parameters?");
	Dialog.addNumber("Wavelengths", 2);
	Dialog.addNumber("Z Slices/Stack", 49);
	Dialog.show();
	wavelengths = Dialog.getNumber();
	zSlices = Dialog.getNumber();

	fileListA = getFileList(""+dir+"SPIMA" + File.separator);
 	fileListB = getFileList(""+dir +"SPIMB" + File.separator);
	fileRanksA = Array.copy(fileListA);
	fileRanksB = Array.copy(fileListB);
	fileNumsA = Array.copy(fileListA);
	fileNumsB = Array.copy(fileListB);
	fileSortA = Array.copy(fileListA);
	fileSortB = Array.copy(fileListB);

	    big5DFileListAString = ("");	    
	    big5DFileListBString =("");

	    for (a=0;a<lengthOf(fileListA);a++) {
		
		sring = replace(fileListA[a], "/", "");
		subsring = sring;
		prefix = "";
		while (isNaN(parseInt(subsring))) {
			prefix = prefix + substring(subsring, 0,1);
			subsring = substring(subsring,1);
			print(subsring);
			print(prefix);
		}
		 if(startsWith(toLowerCase(prefix), "t"))
			prefix = "aaaaa"+prefix;
		numer = parseInt(subsring);
		print(subsring+" "+numer);
		fileNumsA[a] =prefix+ IJ.pad(numer,6)+"|"+sring;

		sring = replace(fileListA[a], "/", "");
		subsring = sring;
		prefix = "";
		while (isNaN(parseInt(subsring))) {
			prefix = prefix + substring(subsring, 0,1);
			subsring = substring(subsring,1);
			print(subsring);
			print(prefix);
		}
		 if(startsWith(toLowerCase(prefix), "t"))
			prefix = "aaaaa"+prefix;
		numer = parseInt(subsring);
		print(subsring+" "+numer);
		fileNumsB[a] =prefix+ IJ.pad(numer,6)+"|"+sring;


	    }
	   Array.sort(fileNumsA);
	   Array.sort(fileNumsB);

	    for (r=0;r<lengthOf(fileNumsA);r++) {
		splt =split(fileNumsA[r],"|");
		fileSortA[r] = splt [1];
		print(r+" "+" "+fileNumsA[r]+" "+fileSortA[r]);
		splt =split(fileNumsB[r],"|");
		fileSortB[r] = splt[1];
	    }
	   
	for (d=0;d<lengthOf(fileSortA);d++) {
		skipIt = false;
	    nextPathA =  dir + "SPIMA" + File.separator + fileSortA[d];
	    nextPathB =  dir + "SPIMB" + File.separator + fileSortB[d];
	    print(nextPathA);
	    print(nextPathB);
 	    if ( File.isDirectory(nextPathA) == 1  && File.isDirectory(nextPathB) == 1) {
			newTifListA = getFileList(nextPathA);
			newTifListB = getFileList(nextPathB);
			if (lengthOf(newTifListA) != lengthOf(newTifListB) || lengthOf(newTifListA) != wavelengths*zSlices)
				skipIt = true;
			if(!skipIt) {
				Array.sort(newTifListA);		
				for (f=0;f<lengthOf(newTifListA);f++) {
					while(!File.exists(dir+"Big5DFileListA.txt"))
					wait(100);
					if (indexOf(big5DFileListAString, nextPathA + File.separator+newTifListA[f])<0)
						File.append(nextPathA + File.separator +newTifListA[f], dir+"Big5DFileListA.txt");
			    }
				Array.sort(newTifListB);		
				for (f=0;f<lengthOf(newTifListB);f++) {
					while(!File.exists(dir+"Big5DFileListB.txt"))
					wait(100);
					if (indexOf(big5DFileListBString, nextPathB + File.separator+newTifListB[f])<0)
						File.append(nextPathB + File.separator +newTifListB[f], dir+"Big5DFileListB.txt");
			    }
		    }
	    }

	}


	    print(nImages);

	    if (File.length(dir+"Big5DFileListA.txt" ) >0) {
		    run("Stack From List...", "open="+dir+"Big5DFileListA.txt use");
	  	    stkNSlices = nSlices;
	
		    rename("SPIMA");
		    run("Stack to Hyperstack...", "order=xyczt(default) channels="+wavelengths+" slices="+zSlices+" frames="+nSlices/(wavelengths*zSlices)+" display=Composite");
	  	    Stack.setPosition(1, 1, 1);	
		    run("Green");
	  	    Stack.setPosition(2, 1, 1);	
		    run("Red");
		    setVoxelSize(vWidth, vHeight, vDepth, vUnit);    

	  	    Stack.setPosition(1, zSlices/2, stkNSlices/(wavelengths*zSlices));		    


	  }
	    if (File.length(dir+"Big5DFileListB.txt" ) >0) {
		    run("Stack From List...", "open="+dir+"Big5DFileListB.txt use");
		    stkNSlices = nSlices;
		    rename("SPIMB");
	   	    run("Stack to Hyperstack...", "order=xyczt(default) channels="+wavelengths+" slices="+zSlices+" frames="+stkNSlices/(wavelengths*zSlices)+" display=Composite");
	  	    Stack.setPosition(1, 1, 1);	
		    run("Green");
	  	    Stack.setPosition(2, 1, 1);	
		    run("Red");
		    setVoxelSize(vWidth, vHeight, vDepth, vUnit);    

	  	    Stack.setPosition(1, zSlices/2, stkNSlices/(wavelengths*zSlices));		    


	  }
	  run("Tile");
	    print(nImages);

	while (true) {
	    listA = getFileList(""+dir+"SPIMA" + File.separator);
 	    listB = getFileList(""+dir +"SPIMB" + File.separator);
	    big5DFileListAString = File.openAsString(dir+"Big5DFileListA.txt");	    
	    big5DFileListBString = File.openAsString(dir+"Big5DFileListB.txt");

	    while (lengthOf(fileListA) == lengthOf(listA) || lengthOf(fileListB) == lengthOf(listB) ) {

	 	listA = getFileList(""+dir +"SPIMA" + File.separator);
		listB = getFileList(""+dir +"SPIMB" + File.separator);
		wait(5000);
	    }	

	    fileListA = getFileList(dir +"SPIMA" + File.separator);
	    fileListB = getFileList(dir + "SPIMB" + File.separator);

	    modDateA = 0;
	    recentestA = "";
	    for (a=0;a<lengthOf(fileListA);a++) {
		if (modDateA < File.lastModified(dir +"SPIMA" + File.separator + fileListA[a])) {
			modDateA = File.lastModified(dir + "SPIMA" + File.separator + fileListA[a]);
			recentestA = dir + "SPIMA" + File.separator + fileListA[a];
		}
	    }
	    IJ.log(recentestA +"\n"+ modDateA);
	    if (File.isDirectory(recentestA) == 1) {
	    newTifList = "";
	    while (lengthOf(newTifList) != wavelengths*zSlices)
			newTifList = getFileList(recentestA);
		Array.sort(newTifList);		
		for (f=0;f<lengthOf(newTifList);f++) {
			while(!File.exists(dir+"Big5DFileListA.txt"))
				wait(100);
			if (indexOf(big5DFileListAString, recentestA+newTifList[f])<0)
				File.append(recentestA+newTifList[f], dir+"Big5DFileListA.txt");
		}
	    }
	    modDateB = 0;
	    recentestB = "";
	    for (b=0;b<lengthOf(fileListB);b++) {
		if (modDateB < File.lastModified(dir +"SPIMB" + File.separator + fileListB[b])) {
			modDateB= File.lastModified(dir + "SPIMB" + File.separator + fileListB[b]);
			recentestB = dir + "SPIMB" + File.separator + fileListB[b];
		}
	    }
	    IJ.log(recentestB+"\n"+ modDateB);
	    if (File.isDirectory(recentestB) == 1) {
	    newTifList = "";
	    while (lengthOf(newTifList) != wavelengths*zSlices)
			newTifList = getFileList(recentestB);
		Array.sort(newTifList);
		for (f=0;f<lengthOf(newTifList);f++) {
	while(!File.exists(dir+"Big5DFileListB.txt"))
		wait(100);
			if (indexOf(big5DFileListBString, recentestB+newTifList[f])<0)
				File.append(recentestB+newTifList[f], dir+"Big5DFileListB.txt");
		}
	    }
	    
		setBatchMode(true);
		print(nImages+" batch");
		
	    if (isOpen("SPIMA")) {
	    	selectWindow("SPIMA");
		Stack.getActiveChannels(channelsA);
		Stack.getDisplayMode(modeA);
	    	Stack.getPosition(channelA, sliceA, frameA);
	  	Stack.setPosition(1, sliceA, frameA);	
		getMinAndMax(minA1, maxA1);
	  	Stack.setPosition(2, sliceA, frameA);	
		getMinAndMax(minA2, maxA2);
	    	getLocationAndSize(xA, yA, widthA, heightA);
	    print(nImages);
	    	close();
	    print(nImages);
	    } else {
		channelA=1; sliceA=1; frameA=1; 
		xA=0; yA=0; widthA=0; heightA=0; 
		minA1=0;minA2=0;maxA1=255;maxA2=255;
	    }
	    if (File.length(dir+"Big5DFileListA.txt" ) >0) {
		    run("Stack From List...", "open="+dir+"Big5DFileListA.txt use");
		    stkNSlices = nSlices;
		    rename("SPIMA");
		    flatID = getImageID();
	    print(nImages);
		    run("Stack to Hyperstack...", "order=xyczt(default) channels="+wavelengths+" slices="+zSlices+" frames="+stkNSlices/(wavelengths*zSlices)+" display=Composite");
	    print(nImages+" HS");
	  	    Stack.setPosition(1, sliceA, frameA);	
		    run("Green");
		    setMinAndMax(minA1, maxA1);	
	  	    Stack.setPosition(2, sliceA, frameA);	
		    run("Red");
		    setMinAndMax(minA2, maxA2);	
	  	    Stack.setPosition(channelA, sliceA, stkNSlices/(wavelengths*zSlices));
		    setLocation(xA,yA);
		    Stack.setDisplayMode(modeA);	    
		    Stack.setActiveChannels(channelsA);

		    setVoxelSize(vWidth, vHeight, vDepth, vUnit);    
		selectImage(flatID);	    
		close();
		
	    if (isOpen("MAX_SPIMA")) {
	    	selectWindow("MAX_SPIMA");
		Stack.getActiveChannels(channelsMAX_A);
		Stack.getDisplayMode(modeMAX_A);
	    	Stack.getPosition(channelMAX_A, sliceMAX_A, frameMAX_A);
	  	Stack.setPosition(1, sliceMAX_A, frameMAX_A);	
		getMinAndMax(minMAX_A1, maxMAX_A1);
	  	Stack.setPosition(2, sliceMAX_A, frameMAX_A);	
		getMinAndMax(minMAX_A2, maxMAX_A2);
	    	getLocationAndSize(xMAX_A, yMAX_A, widthMAX_A, heightMAX_A);
	    	close();
	    } else {
		channelMAX_A=1; sliceMAX_A=1; frameMAX_A=1; 
		xMAX_A=0; yMAX_A=0; widthMAX_A=0; heightMAX_A=0; 
		minMAX_A1=0;minMAX_A2=0;maxMAX_A1=255;maxMAX_A2=255;
	    }
	    }


	    minB =0;
	    maxB = 255;
	    channelsB = "11";
	    modeB="composite";
	    	    if (isOpen("SPIMB")) {
		selectWindow("SPIMB");
		Stack.getActiveChannels(channelsB);
		Stack.getDisplayMode(modeB);
	    	Stack.getPosition(channelB, sliceB, frameB);
	  	Stack.setPosition(1, sliceB, frameB);	
		getMinAndMax(minB1, maxB1);
	  	Stack.setPosition(2, sliceB, frameB);	
		getMinAndMax(minB2, maxB2);
	    	getLocationAndSize(xB, yB, widthB, heightB);
	    print(nImages);
	    	close();
	    print(nImages);
	    } else {
		channelB=1; sliceB=1; frameB=1; 
		xB=0; yB=0; widthB=0; heightB=0; 
		minB1=0;minB2=0;maxB1=255;maxB2=255;
	    }
	    if (File.length(dir+"Big5DFileListB.txt" ) >0) {
		    run("Stack From List...", "open="+dir+"Big5DFileListB.txt use");
		    stkNSlices = nSlices;

		    rename("SPIMB");
		    run("Stack to Hyperstack...", "order=xyczt(default) channels="+wavelengths+" slices="+zSlices+" frames="+stkNSlices/(wavelengths*zSlices)+" display=Composite");
	  	    Stack.setPosition(1, sliceB, frameB);	
		    run("Green");
		    setMinAndMax(minB1, maxB1);
	  	    Stack.setPosition(2, sliceB, frameB);	
		    run("Red");
		    setMinAndMax(minB2, maxB2);
	  	    Stack.setPosition(channelB, sliceB, stkNSlices/(wavelengths*zSlices));		    
		    setLocation(xB,yB);
		    Stack.setDisplayMode(modeB);
		    Stack.setActiveChannels(channelsB);

		    setVoxelSize(vWidth, vHeight, vDepth, vUnit);    

	    if (isOpen("MAX_SPIMB")) {
	    	selectWindow("MAX_SPIMB");
		Stack.getActiveChannels(channelsMAX_B);
		Stack.getDisplayMode(modeMAX_B);
	    	Stack.getPosition(channelMAX_B, sliceMAX_B, frameMAX_B);
	  	Stack.setPosition(1, sliceMAX_B, frameMAX_B);	
		getMinAndMax(minMAX_B1, maxMAX_B1);
	  	Stack.setPosition(2, sliceMAX_B, frameMAX_B);	
		getMinAndMax(minMAX_B2, maxMAX_B2);
	    	getLocationAndSize(xMAX_B, yMAX_B, widthMAX_B, heightMAX_B);
	    	close();
	    } else {
		channelMAX_B=1; sliceMAX_B=1; frameMAX_B=1; 
		xMAX_B=0; yMAX_B=0; widthMAX_B=0; heightMAX_B=0; 
		minMAX_B1=0;minMAX_B2=0;maxMAX_B1=255;maxMAX_B2=255;
	    }
	    }
	    
	    print(nImages);
	for (i=1;i<=nImages;i++){
		print(nImages+" "+i);
		
		selectImage(i);
		//run("Duplicate Region/Load to RAM...", "title=DUP_SPIMA-1 duplicate channels=1-2 slices=1-49 frames=2-2");
		source = getTitle();
		Stack.getDimensions(width, height, channels, zDepth, frames);
		Stack.getPosition(channel, slice, frame);
		for (z=0; z<zDepth; z++) { 
			Stack.setSlice(z+1);
			run("FFT, no auto-scaling");
			if (z==0) {
				rename("FFTstack");	
			} else {
				run("Select All");
				run("Copy");
				close();
				selectWindow("FFTstack");
				run("Add Slice");
				if (z>0)
					Stack.setSlice(z+2);
				run("Select All");
				run("Paste");
			}
			selectWindow(source);
		}
		selectWindow("FFTstack");
		makeOval(250, 250, 13, 13);
		run("Clear", "stack");
		makeOval(220, 220, 73, 73);
		run("Clear Outside", "stack");
		run("Plot Z-axis Profile");
		close();
		selectWindow("FFTstack");
		close();
		
		sliceAvgs = newArray(zDepth);
		List.clear;
		for (z=1; z<zDepth; z++) { 
			sliceAvgs[z] = getResult("Mean", z);
			//print(sliceAvgs[z] );
			List.set(sliceAvgs[z] , z);
		}
		
		Array.sort(sliceAvgs);
		print(source+": Best focus in slice "+List.get(sliceAvgs[zDepth-1]));
		selectWindow("Results");
		run("Close");
		selectWindow(source);
		Stack.setPosition(channel, slice, frame)
	
	}
	    
		setBatchMode(false);
	}
}



